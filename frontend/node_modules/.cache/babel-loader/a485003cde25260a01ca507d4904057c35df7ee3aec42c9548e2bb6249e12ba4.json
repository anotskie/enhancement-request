{"ast":null,"code":"export default class APIService {\n  static UpdateArticle(article_id, body) {\n    return fetch(`http://127.0.0.1:8000/api/articles/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Token 5c567d10dfba02ecd6a26904732c78bb33a76808\"\n      },\n      body: JSON.stringify(body)\n    }).then(resp => {\n      if (!resp.ok) {\n        throw new Error(`Request failed with status: ${resp.status}`);\n      }\n      return resp.json();\n    }).catch(error => {\n      console.error(\"Error updating article:\", error);\n      throw error;\n    });\n  }\n  static InsertArticle(body) {\n    return fetch(\"http://127.0.0.1:8000/api/articles/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Token 5c567d10dfba02ecd6a26904732c78bb33a76808\"\n      },\n      body: JSON.stringify(body)\n    }).then(resp => {\n      if (!resp.ok) {\n        throw new Error(`Request failed with status: ${resp.status}`);\n      }\n      return resp.json();\n    }).catch(error => {\n      console.error(\"Error updating article:\", error);\n      throw error;\n    });\n  }\n  static DeleteArticle(article_id) {\n    return fetch(`http://127.0.0.1:8000/api/articles/${article_id}/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Token 5c567d10dfba02ecd6a26904732c78bb33a76808\"\n      }\n    }).then(resp => {\n      if (!resp.ok) {\n        throw new Error(`Request failed with status: ${resp.status}`);\n      }\n    }).catch(error => {\n      console.error(\"Error deleting article:\", error);\n      throw error;\n    });\n  }\n}\nconst registerUser = async (username, password) => {\n  const response = await fetch(`${API_BASE_URL}register/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  const data = await response.json();\n  return data;\n};\n\n// Function to log in a user\nconst loginUser = async (username, password) => {\n  const response = await fetch(`user-login/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  const data = await response.json();\n  return data;\n};\nexport { registerUser, loginUser };","map":{"version":3,"names":["APIService","UpdateArticle","article_id","body","fetch","method","headers","Authorization","JSON","stringify","then","resp","ok","Error","status","json","catch","error","console","InsertArticle","DeleteArticle","registerUser","username","password","response","API_BASE_URL","data","loginUser"],"sources":["/Users/kael/Documents/React Proj/enhancement-request/frontend/src/components/APIService.js"],"sourcesContent":["export default class APIService {\r\n  static UpdateArticle(article_id, body) {\r\n    return fetch(`http://127.0.0.1:8000/api/articles/`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Token 5c567d10dfba02ecd6a26904732c78bb33a76808\",\r\n      },\r\n      body: JSON.stringify(body),\r\n    })\r\n      .then((resp) => {\r\n        if (!resp.ok) {\r\n          throw new Error(`Request failed with status: ${resp.status}`);\r\n        }\r\n        return resp.json();\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error updating article:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static InsertArticle(body) {\r\n    return fetch(\"http://127.0.0.1:8000/api/articles/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Token 5c567d10dfba02ecd6a26904732c78bb33a76808\",\r\n      },\r\n      body: JSON.stringify(body),\r\n    })\r\n      .then((resp) => {\r\n        if (!resp.ok) {\r\n          throw new Error(`Request failed with status: ${resp.status}`);\r\n        }\r\n        return resp.json();\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error updating article:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  static DeleteArticle(article_id) {\r\n    return fetch(`http://127.0.0.1:8000/api/articles/${article_id}/`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Token 5c567d10dfba02ecd6a26904732c78bb33a76808\",\r\n      },\r\n    })\r\n      .then((resp) => {\r\n        if (!resp.ok) {\r\n          throw new Error(`Request failed with status: ${resp.status}`);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error deleting article:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n}\r\n\r\nconst registerUser = async (username, password) => {\r\n  const response = await fetch(`${API_BASE_URL}register/`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ username, password }),\r\n  });\r\n\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\n// Function to log in a user\r\nconst loginUser = async (username, password) => {\r\n  const response = await fetch(`user-login/`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ username, password }),\r\n  });\r\n\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nexport { registerUser, loginUser };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}